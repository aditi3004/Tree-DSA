public class BstPreorder {
    static class node {
        int data;
        node right;
        node left;

        public node(int data) {
            this.data = data;
            this.right = null;
            this.left = null;
        }
    }

    static class BinaryTree {
        // this idx variable is used for traversal and fetching the data
        static int idx = -1;

        // passing the nodes array into the function to return the root node
        public static node buildTree(int nodes[]) {
            idx++;
            if (nodes[idx] == -1) {
                // since null node ka left and right child nahi hota
                System.out.println("null node encountered");
                return null;
            }
            // data from the array nodes[] is given to create a new node in the tree
            node newNode = new node(nodes[idx]);
            System.out.println(newNode.data);
            // recursively forming the left subtree first
            // this will run until the null is reached or the leaf node for the left subtree
            // is reached
            // after then only in the preorder formation pointer moves to the right subtree
            System.out.println("entering in the left");
            newNode.left = buildTree(nodes);
            System.out.println("left subtree is formed");
            // recursively creating the right subtree after the right subtree is created for
            // a particular leve
            System.out.println("entering the right");
            newNode.right = buildTree(nodes);
            System.out.println("right subtree is formed");
            System.out.println("newNode: " + newNode.data);
            return newNode;
        }
    }

    public static void main(String[] args) {
        // preorder sequenece given
        int nodes[] = { 1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1 };
        // -1 represents the null node
        // algo for the preorder is
        // 1.visit the root node ie. 1 is our root node
        BinaryTree tree = new BinaryTree();
        node root = tree.buildTree(nodes);
        // since that function returns the root node and here our root node is "1", so
        // that should be printed
        System.out.println("root: " + root.data);
        System.out.println(root.left.right.data);
        /*
         * System.out.println("root.left: " + root.left.data);
         * System.out.println("root.right: " + root.right.data);
         * System.out.println("root.left.left: " + root.left.left.data);
         */

    }
}
