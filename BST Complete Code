import java.util.*;


public class BstPreorder {
    static class node {
        int data;
        node right;
        node left;

        public node(int data) {
            this.data = data;
            this.right = null;
            this.left = null;
        }
    }

    static class BinaryTree {
        // this idx variable is used for traversal and fetching the data
        static int idx = -1;

        // passing the nodes array into the function to return the root node
        public static node buildTree(int nodes[]) {
            idx++;
            if (nodes[idx] == -1) {
                // since null node ka left and right child nahi hota
                System.out.println("null node encountered");
                return null;
            }
            // data from the array nodes[] is given to create a new node in the tree
            node newNode = new node(nodes[idx]);
            System.out.println(newNode.data);
            // recursively forming the left subtree first
            // this will run until the null is reached or the leaf node for the left subtree
            // is reached
            // after then only in the preorder formation pointer moves to the right subtree
            System.out.println("entering in the left");
            newNode.left = buildTree(nodes);
            System.out.println("left subtree is formed");
            // recursively creating the right subtree after the right subtree is created for
            // a particular leve
            System.out.println("entering the right");
            newNode.right = buildTree(nodes);
            System.out.println("right subtree is formed");
            System.out.println("newNode: " + newNode.data);
            return newNode;
        }
    }
    
    public static void preOrder(node root) {
    	if(root==null) {
    		System.out.print("-1"+" ");
    		return;
    	}
    	
    	System.out.print(root.data+" ");
    	preOrder(root.left);//left pehle hoga
    	preOrder(root.right);
    }

    
    public static void inOrder(node root) {
    	//inorder= left->root->right
    	if(root==null) {
    		System.out.print("-1 ");
    		return;
    	}
    	
    	inOrder(root.left);
    	System.out.print(root.data+" ");
    	inOrder(root.right);
    }
    public static void postOrder(node root) {
    	//postorder= left->right->root
    	if(root==null) {
    		System.out.print("-1 ");
    		return;
    	}
    	
    	postOrder(root.left);
    	postOrder(root.right);
    	System.out.print(root.data+" ");
    }
    
    
    public static void levelOrder(node root) {
    	if(root==null) {
    		return;
    	}
    	
    	Queue <node> q=new LinkedList<>();
    	q.add(root);
    	//adding a null after the root node to go on the next line
    	q.add(null);
    	
    	while(!q.isEmpty()) {
    		node curr=q.remove();
    		// the above statement pops the first element from the queue
    		if(curr==null) {
    			//if the null node is encountered we move to next line
    			System.out.println();
    			//now we check that whether the queue is empty like whether 
    			//this node was the last node in the queue then we need to consider the cases
    			if(q.isEmpty()) {
    				break;
    				//this means the node that was null was the end of the queue created for
    				//level order creation
    			}
    			else {
    				q.add(null);
    			}
    		}else {
    			System.out.print(curr.data+" ");
    			
    			if(curr.left!=null) {
    				q.add(curr.left);
    				//System.out.println("the data has been added in the queue");
    			}
    			
    			if(curr.right!=null) {
    				q.add(curr.right);
    				//System.out.println("the data has been added in the queue");
    			}
    		}
    		
    	}
    }
    
    public static int countNode(node root) {
    	//int counter=1;
    	if(root==null) {
    		//if the root is null that means the tree is empty
    		return 0;
    	}
    	//we will recursively call the nodes for counting the number of nodes
    	int LeftNode=countNode(root.left);
    	//System.out.println("left: "+LeftNode);
    	int RightNode=countNode(root.right);
    	//System.out.println("right: "+RightNode);
    	System.out.println("total: "+(LeftNode+RightNode+1));
    	return LeftNode+RightNode+1;
    	
    }
    
    public static int sumNodes(node root) {
    	if(root==null) {
    		return 0;
    	}
    	
    	int sumLeft=sumNodes(root.left);
    	int sumRight=sumNodes(root.right);
    	System.out.println("count guess left: "+sumLeft);
    	System.out.println("count guess right: "+sumRight);
    	System.out.println("sum of the binary tree is: "+(sumLeft+sumRight+root.data));
    	return sumLeft+sumRight+root.data;
    	
    }
    
    public static int height(node root) {
    	if(root==null) {
    		return 0;
    	}
    	
    	int left=height(root.left);
    	int right=height(root.right);
    	int actualHeight=Math.max(left, right);
    	System.out.println("height of the tree is: "+(actualHeight+1));
    	return actualHeight+1;
    }
    
    //o(n^2)
    public static int diameter(node root) {
    	if(root==null) {
    		return 0;
    	}
    	int dia1=diameter(root.left);
    	int dia2=diameter(root.right);
    	int dia3=height(root.left)+height(root.right)+1;//through root node diameter
    	//height function is used because we want to traverse through the left or right side only
    	int actualDia=Math.max(dia1,Math.max(dia2, dia3));
    	System.out.println("diameter of the tree: "+actualDia);
    	return actualDia;
    }
    
    //O(N):
    public static Tree diameter2(node root) {
    	if(root==null) {
    		return new Tree(0,0);//since height and diameter both will be 0
    	}
    	
    	Tree left=diameter2(root.left);
    	Tree right=diameter2(root.right);
    	
    	int height=Math.max(left.ht,right.ht)+1;
    	int dia1=left.diam;
    	int dia2=right.diam;
    	int diam3=left.ht+right.ht+1;
    	
    	int actualDia2=Math.max(dia1, Math.max(dia2, diam3));
    	
    	Tree t=new Tree(height,actualDia2);
    	return t;
    }
    
    
    public static void main(String[] args) {
        // preorder sequence given
        int nodes[] = { 1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1 };
        // -1 represents the null node
        // algorith for the preorder is
        // 1.visit the root node ie. 1 is our root node
        BinaryTree tree = new BinaryTree();
        node root = tree.buildTree(nodes);
        // since that function returns the root node and here our root node is "1", so
        // that should be printed
        System.out.println("root: " + root.data);
        System.out.println(root.left.right.data);
        /*
         * System.out.println("root.left: " + root.left.data);
         * System.out.println("root.right: " + root.right.data);
         * System.out.println("root.left.left: " + root.left.left.data);
         */
        System.out.println("we will get the preorder sequence back: ");
        preOrder(root);
        System.out.println();
        System.out.println("the inorder sequence is: ");
        inOrder(root);
        System.out.println();
        System.out.println("the postorder sequence is: ");
        postOrder(root);
        System.out.println();
        System.out.println("the level order sequence is: ");
        levelOrder(root);
        System.out.println();
        countNode(root);
        System.out.println();
        sumNodes(root);
        System.out.println();
        height(root);
    }
}
